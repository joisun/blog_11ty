---
layout: base.njk
permalink: /routine/
---

<a class="cd-back" href="{{ '/' | url }}"><pre>{{ site.back_home_text }}</pre></a>

<article class="prose" data-pagefind-body>
  <p class="post-meta">
    <span id="last-updated" class="last-updated"></span>
  </p>
  <h1>My Routine</h1>
  <div id="github-routine-content" class="markdown-content">
    <!-- Content will be loaded from GitHub -->
    <div class="loading-spinner">
      <div class="spinner"></div>
      <p>Loading...</p>
    </div>
  </div>

  <p style="text-align: right; font-style: italic">
    <span id="busuanzi_container_page_pv" style="display: inline;">
     <span id="busuanzi_value_page_pv"></span>
    </span>
    read
  </p>
</article>

<a class="cd-back" href="{{ '/' | url }}"><pre>{{ site.back_home_text }}</pre></a>

<script>
    // GitHub repository info
    const routineUrl = 'https://raw.githubusercontent.com/joisun/joisun/refs/heads/main/Routine.md';
    
    // Fetch the last commit info to get the last updated time
    fetch(`https://api.github.com/repos/joisun/joisun/commits?path=Routine.md&sha=main&per_page=1`)
        .then(response => {
            if (!response.ok) { 
                throw new Error('Failed to fetch commit info');
            }
            return response.json();
        })
        .then(commits => {
            if (commits && commits.length > 0) {
                const lastCommit = commits[0];
                const lastUpdated = new Date(lastCommit.commit.committer.date);
                
                // Format the date
                const options = { 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                };
                const formattedDate = lastUpdated.toLocaleDateString(undefined, options);
                
                // Display the last updated time
                document.getElementById('last-updated').innerHTML = `Last updated: ${formattedDate}`;
            }
        })
        .catch(error => {
            console.error('Error fetching commit info:', error);
        });

    // Fetch content from GitHub
    fetch(`${routineUrl}?_=${new Date().getTime()}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(data => {
            // Use marked.js to convert markdown to HTML
            const routineContentElement = document.getElementById('github-routine-content');
            
            // Check if marked is available, if not load it
            if (typeof marked === 'undefined') {
                const script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/marked/marked.min.js';
                script.onload = function() {
                    // Configure marked options
                    marked.setOptions({
                        breaks: true,
                        gfm: true,
                        headerIds: true,
                        mangle: false
                    });
                    
                    // Render the content
                    routineContentElement.innerHTML = marked.parse(data);
                    
                    // Process checkboxes for task lists
                    processTaskLists();
                    
                    // Check if headings are too many
                    checkHeadings();
                };
                document.head.appendChild(script);
            } else {
                // Configure marked options
                marked.setOptions({
                    breaks: true,
                    gfm: true,
                    headerIds: true,
                    mangle: false
                });
                
                // Render the content
                routineContentElement.innerHTML = marked.parse(data);
                
                // Process checkboxes for task lists
                processTaskLists();
                
                // Check if headings are too many
                checkHeadings();
            }
        })
        .catch(error => {
            console.error('Error fetching routine content:', error);
            document.getElementById('github-routine-content').innerHTML = `
                <div class="error-message">
                    <p>Sorry, there was an error loading the routine content.</p>
                    <p>Error details: ${error.message}</p>
                </div>
            `;
        });
    
    // Function to process GitHub-style task lists
    function processTaskLists() {
        // Find all list items with checkboxes
        const checkboxItems = document.querySelectorAll('li input[type="checkbox"]');
        
        checkboxItems.forEach(checkbox => {
            // Make checkboxes disabled (read-only)
            checkbox.disabled = true;
            
            // Add appropriate classes for styling
            const listItem = checkbox.closest('li');
            if (listItem) {
                listItem.classList.add('task-list-item');
                if (checkbox.checked) {
                    listItem.classList.add('task-completed');
                }
            }
        });
        
        // Find all tables and add wrapper
        const tables = document.querySelectorAll('table');
        tables.forEach(table => {
            const wrapper = document.createElement('div');
            wrapper.className = 'table-wrapper';
            table.parentNode.insertBefore(wrapper, table);
            wrapper.appendChild(table);
        });
    }
    
    // Check if headings are too many
    function checkHeadings() {
        const headings = document.querySelectorAll('.markdown-content h1, .markdown-content h2, .markdown-content h3, .markdown-content h4, .markdown-content h5, .markdown-content h6');
        if (headings.length > 15) {
            headings.forEach(el => el.classList.add('show-heading'));
        }
    }
    
    // Image preview support
    window.addEventListener("click", (e) => {
        if (e.target.nodeName === "IMG") {
            const w = 800;
            const h = 400;
            const windowFeatures = `width=${w},height=${h},left=${(window.innerWidth-w)/2},top=${(window.innerHeight-h)/2},directories=0,titlebar=0,toolbar=0,location=0,status=0,menubar=0,scrollbars=no,`;
            window.open(`${window.__PREFIX}preview/?url=${e.target.src}`, '-', windowFeatures);
        }
    });
</script>